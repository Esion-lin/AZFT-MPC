public class P extends java.lang.Object
{
    static final int len;

    public void <init>()
    {
        P r0;

        r0 := @this: P;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int rem(int, int)
    {
        int i0, i1, $i2, $i3, i4, i5, i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 = 0;

        i5 = 31;

     label1:
        if i5 < 0 goto label3;

        i6 = i4 << 1;

        $i2 = i0 >>> i5;

        $i3 = $i2 & 1;

        i4 = i6 + $i3;

        if i4 < i1 goto label2;

        i4 = i4 - i1;

     label2:
        i5 = i5 + -1;

        goto label1;

     label3:
        return i4;
    }

    public static int mul_mod(int, int, int)
    {
        int i0, i1, i2, i3, i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = i0 * i1;

        i4 = staticinvoke <P: int rem(int,int)>(i3, i2);

        return i4;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        MPCAnnotation r1;
        int i0, i1;

        r0 := @parameter0: java.lang.String[];

        r1 = staticinvoke <MPCAnnotationImpl: MPCAnnotation v()>();

        i0 = 0;

        i1 = 1;

     label1:
        if i1 > 100 goto label2;

        i0 = i0 + i1;

        i1 = i1 + 1;

        goto label1;

     label2:
        interfaceinvoke r1.<MPCAnnotation: void OUT(int)>(i0);

        return;
    }

    public static void <clinit>()
    {
        <P: int len> = 32;

        return;
    }
}
